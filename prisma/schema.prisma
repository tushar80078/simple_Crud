generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin_account {
  id            Int       @id @default(autoincrement())
  admin_name    String    @db.VarChar(255)
  email_address String    @db.VarChar(50)
  password      String    @db.Text
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
}

model courses {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(255)
  fees               Decimal   @db.Decimal(10, 2)
  course_description String?   @db.Text
  course_score       Decimal?  @db.Decimal(10, 2)
  has_project        Boolean?
  has_residency      Boolean?
  couse_image_link   String?   @db.Text
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
  publish            Boolean
}

model mentors {
  id                    Int       @id @default(autoincrement())
  first_name            String    @db.VarChar(255)
  last_name             String    @db.VarChar(255)
  experience_level      String    @db.VarChar(50)
  email_address         String    @db.VarChar(50)
  mobile_no             String    @db.VarChar(50)
  dob                   DateTime? @db.Date
  password              String    @db.Text
  skills_specialization String?   @db.VarChar(255)
  education             String?   @db.VarChar(255)
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)
}

model skills {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  skill_description String?        @db.Text
  skill_score       Decimal?       @db.Decimal(10, 2)
  has_project       Boolean?
  skill_image_link  String?        @db.Text
  created_at        DateTime?      @db.Timestamp(0)
  updated_at        DateTime?      @default(now()) @db.Timestamp(0)
  publish           Boolean
  course_units      course_units[]
}

model students {
  id                Int                     @id @default(autoincrement())
  firstname         String                  @db.VarChar(255)
  lastname          String                  @db.VarChar(255)
  address           String                  @db.Text
  student_mobile_no String                  @db.VarChar(20)
  parent_mobile_no  String                  @db.VarChar(20)
  email_address     String                  @unique(map: "email_address") @db.VarChar(255)
  dob               DateTime?               @db.Date
  gender            students_gender?
  qualification     students_qualification?
  education         String?                 @db.VarChar(255)
  institute_name    String?                 @db.VarChar(255)
  status            students_status?
  profile_photo     String?                 @db.Text
  password          String                  @db.VarChar(255)
  created_at        DateTime?               @db.Timestamp(0)
  updated_at        DateTime?               @default(now()) @db.Timestamp(0)
}

model course_units {
  id           Int                    @id @default(autoincrement())
  course_id    Int
  unit_type    course_units_unit_type
  skill_id     Int?
  project_id   Int?
  residency_id Int?
  sequence     Int?
  projects     projects?              @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_id")
  residencies  residencies?           @relation(fields: [residency_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_residency_id")
  skills       skills?                @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_skill_id")

  @@index([project_id], map: "fk_project_id")
  @@index([residency_id], map: "fk_residency_id")
  @@index([skill_id], map: "fk_skill_id")
}

model live_sessions {
  id               Int       @id @default(autoincrement())
  session_name     String    @db.VarChar(255)
  session_duration Int
  base_points      Decimal   @db.Decimal(10, 2)
  allocated_points Decimal   @db.Decimal(10, 2)
  isMandatory      Boolean
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  publish          Boolean
}

model projects {
  id                     Int                 @id @default(autoincrement())
  title                  String              @db.VarChar(255)
  instructions           String?             @db.VarChar(255)
  base_points            Decimal?            @db.Decimal(10, 2)
  allocated_points       Decimal?            @db.Decimal(10, 2)
  isMandatory            Boolean
  projectFor             projects_projectFor
  allocation_time_period Int
  created_at             DateTime?           @db.Timestamp(0)
  updated_at             DateTime?           @default(now()) @db.Timestamp(0)
  publish                Boolean
  course_units           course_units[]
}

model residencies {
  id               Int            @id @default(autoincrement())
  residency_name   String         @db.VarChar(255)
  duration         Int
  instructions     String?        @db.Text
  base_points      Decimal?       @db.Decimal(10, 2)
  allocated_points Decimal?       @db.Decimal(10, 2)
  isMandatory      Boolean
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @default(now()) @db.Timestamp(0)
  publish          Boolean
  course_units     course_units[]
}

model video_recorded_sessions {
  id               Int       @id @default(autoincrement())
  session_name     String    @db.Text
  recording_date   DateTime? @db.DateTime(0)
  video_url        String?   @db.Text
  base_points      Decimal   @db.Decimal(10, 2)
  allocated_points Decimal   @db.Decimal(10, 2)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @default(now()) @db.Timestamp(0)
  isMandatory      Boolean
  publish          Boolean
}

enum students_qualification {
  secondary_school
  higher_secondary
  junior_college
  under_graduate
  post_graduate
}

enum students_status {
  active
  inactive
}

enum students_gender {
  male
  female
  other
}

enum course_units_unit_type {
  skill
  project
  residency
}

enum projects_projectFor {
  skill
  course
}
